enum Visibility {
    VISIBLE, // Draw this entity and it's border (if it's enabled)
    INVISIBLE, // Only draw this entity's border if it's enabled
    GONE // Don't draw the entity or the border
};

class Entity {
    virtual bool IsActive();
    virtual bool IsBorderEnabled();

    virtual float GetX();
    virtual float GetY();
    virtual float GetZ();

    virtual float GetWidth();
    virtual float GetHeight();
    virtual float GetDepth();

    virtual Color32 GetColor();
    virtual Color32 GetBorderColor();

    virtual Visibility GetVisibility();

/*
    virtual Vertex *GetVertices();
    virtual int GetNumVertices();

    virtual Texture *GetTexture();

    virtual InputComponent *GetInputComponent();
    virtual PhysicsComponent *GetPhysicsComponent();
    virtual RenderComponent *GetRenderComponent();
*/

    virtual void SetActive(bool _isActive);
    virtual void SetBorderEnabled(bool _isBorderEnabled);

    virtual void SetX(float _x);
    virtual void SetY(float _y);
    virtual void SetZ(float _z);

    virtual void SetWidth(float _x);
    virtual void SetHeight(float _y);
    virtual void SetDepth(float _z);

    virtual void SetColor(Color32 _color);
    virtual void SetBorderColor(Color32 _borderColor);

    virtual void SetVisibility(Visibility _visibility);

/*
    virtual void SetVertices(Vertex _vertices[], int _count);

    virtual Uint32 SetTextureBitmap(const char *_filename);

    virtual void SetInputComponent(InputComponent *_inputComponent);
    virtual void SetPhysicsComponent(PhysicsComponent *_physicsComponent);
    virtual void SetRenderComponent(RenderComponent *_renderComponent);
*/
};
